#!/usr/bin/perl
# Copyright (c) 2013 Mitchell Cooper

use warnings;
use strict;

use lib 'lib';

use IO::Async::Loop;
use IO::Async::Listener;
use IO::Socket::UNIX;

use Wikifier;

# read the configuration page.
if (!@ARGV) {
    die "Please provide the configuration file as the first argument\n";
}
(my $conf = Wikifier::Page->new(file => shift @ARGV))->parse or die "Configuration error\n";

# create a loop.
my $loop = IO::Async::Loop->new;

# create a new listener and add it to the loop.
my $listener = IO::Async::Listener->new(on_stream => \&handle_stream);
$loop->add($listener);

# if a file already exists and is a socket, I assume we should delete it.
my $path = $conf->get('server.socket.path');
if ($path && -S $path) {
    unlink $path;
}

# create the socket.
my $socket = IO::Socket::UNIX->new(
    Local  => $path || die("No socket file path specified\n"),
    Listen => 1
) or die "Can't create UNIX socket: $!\n";

# begin listening.
$listener->listen(handle => $socket);

# handle a new stream.
sub handle_stream {
    my (undef, $stream) = @_;
   
    # configure the stream.
    $stream->configure(on_read => \&handle_data);
    
    # add the stream to the loop.
    $loop->add($stream);
    
}

# handle incoming data.
sub handle_data {
    my ($stream, $buffref, $eof) = @_;
    while ($$buffref =~ s/^(.*?)\n//) {
        # handle the data ($1)
    }
}
